*savemap.txt* *savemap*

Author:
  tyru <tyru.exe@gmail.com>
Version: 0.0.0
License: Under the same license as Vim itself (see :help license)

==============================================================================
CONTENTS						*savemap-contents*

Introduction		|savemap-introduction|
Interface			|savemap-interface|
  Functions			|savemap-functions|
Restore Object		|savemap-restore-object|
TODO				|savemap-todo|
Changelog			|savemap-changelog|


==============================================================================
INTRODUCTION						*savemap-introduction* {{{

|savemap| is the library to provide a way
to restore current mapping(s)/abbreviation(s) "perfectly".

...But remember, you can always use |:map-<buffer>| for "simple" case.

>
    nmap foo blahblahblah

    let foo_nmap = savemap#save_map('n', 'foo')
    if empty(foo_nmap)
        echoerr 'your vim version is lower than 7.3.032!'
    endif

    nmap foo bar
    " Execute 'bar'.
    normal foo

    call foo_nmap.restore()
    " Execute 'blahblahblah'.
    normal foo


Omit 2nd arg of |savemap#save_map()| to save all mappings of the mode.
>
    let normal_mappings = savemap#save_map('n')
    if empty(normal_mappings)
        echoerr 'your vim version is lower than 7.3.032!'
    endif

   " Clear!
    nmapclear

    " Map own mappings.
    nnoremap a b
    nnoremap c d
    ...

    try
        ... " Do it
    finally
        call normal_mappings.restore()
    endtry


Requirements:
- Vim 7.3 or higher

}}}
==============================================================================
INTERFACE				*savemap-interface* {{{
------------------------------------------------------------------------------
FUNCTIONS					*savemap-functions* {{{

savemap#load()							*savemap#load()*
	Load autoload/savemap.vim .

									*savemap#save_map()*
savemap#save_map({mode} [, {lhs}])   or
savemap#save_map({options})          or
savemap#save_map({options1} [, {options2} ...])
	Return non-empty |Dictionary| which has .restore() method
	to restore the mapping.
	See |savemap-restore-object| for the details.

	In the 1st form, if {lhs} was omitted,
	.restore() will restore all mappings in {mode}.

	In the 2nd form, you can filter in all mappings
	with {options} keys & values.
	{options} is a |Dictionary| like the following:
		"lhs"
			The {lhs} of the mapping.

			NOTE: You cannot specify both of "lhs-regexp"
			and "lhs", or both of "rhs", "rhs-regexp"
			altogether.
			It is undefined behavior.
			But you can specify "lhs" or "lhs-regexp"
			with "rhs" or "rhs-regexp" altogether.
			you will get mappings object holding
			the mappings matching with "lhs" or
			"lhs-regexp" __AND__ "rhs" or "rhs-regexp".
		"rhs"
			The {rhs} of the mapping as typed.
		"lhs-regexp"
			The regexp of the matching mappings of lhs.
		"rhs-regexp"
			The regexp of the matching mappings of rhs.
		"silent"
			non-zero for a |:map-silent| mapping.
			zero for a non-|:map-silent| mapping.
			If the key does not exist,
			get the both of mappings.
		"noremap"
			non-zero if the {rhs} of the mapping is not remappable.
			zero if the {rhs} of the mapping is remappable.
			If the key does not exist,
			get the both of mappings.
		"expr"
			non-zero for an expression mapping (|:map-<expr>|).
			zero for a non-expression mapping.
			If the key does not exist,
			get the both of mappings.
		"buffer"
			non-zero for a buffer local mapping (|:map-local|).
			zero for a non-buffer local mapping.
			If the key does not exist,
			get the both of mappings.
		"mode"
			Modes for which the mapping is defined.
			these characters will be used:
			"n"		Normal
			"v"		Visual (including Select)
			"o"		Operator-pending
			"i"		Insert
			"c"		Cmd-line
			"s"		Select
			"x"		Visual
			"l"		langmap |language-mapping|
			" "		Normal, Visual and Operator-pending
			"!"		Insert and Commandline mode
			(|mapmode-ic|)
		"sid"
			(TODO)

			The script local ID, used for <sid> mappings
			(|<SID>|).
			If the key does not exist,
			get all mappings.

	As you see above, this function
	was designed like |maparg()|.

	the 3rd form is TODO.

	If Vim does not support the 4th argument of |maparg()|,
	Return empty |Dictionary|.

								*savemap#save_abbr()*
savemap#save_abbr({mode} [, {lhs}])   or
savemap#save_abbr({options})          or
savemap#save_abbr({options1} [, {options2} ...])
	|Abbreviation| version of |savemap#save_map()|.

savemap#supported_version()				*savemap#supported_version()*
	Return non-zero if Vim supported the 4th argument of |maparg()|.

}}}
}}}
==============================================================================
RESTORE OBJECT				*savemap-restore-object* {{{

Savemap.restore()
	Restore the mappings
	which the object is holding.

Savemap.has_abbr()
	Return boolean value that means whether
	the object holds abbreviations or mappings.

Savemap.get_map_info()
	(TODO)

	Return |List| which means mappings which the object holds.
	The |List| has mappings info as its elements.
	the structure of mappings info is: >
		{
			"buffer": {map-info},
			"normal": {map-info},
		}
<	{map-info} can be a empty dictionary
	when the mapping is not found.
	Or if the mapping is the found,
	{map-info}'s structure is same as |maparg()|'s dictionary
	which can be obtained when {dict} is non-zero.

}}}
==============================================================================
TODO						*savemap-todo* {{{
}}}
==============================================================================
CHANGELOG						*savemap-changelog* {{{

0.0.0:
- Initial upload

}}}
==============================================================================
vim:tw=78:fo=tcq2mM:ts=4:ft=help:norl:noet:fdm=marker:fen
